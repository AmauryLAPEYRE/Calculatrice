// src/services/aiReviewService.js

import { supabase } from '../supabaseClient';
import {getProductReviewCriterias} from './reviewService'
/**
 * Service pour g√©rer la g√©n√©ration automatique d'avis avec l'IA
 */

const AI_REVIEW_API_URL = 'https://gwjkbtbtqntwaqtrflnq.supabase.co/functions/v1/create-review-ia';

/**
 * V√©rifie si un avis IA existe d√©j√† pour ce produit
 * @param {string} productCode - Code-barres du produit
 * @returns {Promise<Object>} - R√©sultat de la v√©rification
 */
export const checkExistingAIReview = async (productCode) => {
  try {
    console.log('üîç V√©rification d\'avis IA existant pour le produit:', productCode);
    
    if (!productCode) {
      throw new Error('Code produit requis');
    }

    // Chercher un avis avec review_source = 'ai' pour ce produit
    const { data, error } = await supabase
      .from('product_reviews')
      .select('id, creation_date, status, user_id')
      .eq('product_code', productCode)
      .eq('review_source', 'ai')
      .order('creation_date', { ascending: false })
      .limit(1);

    if (error) {
      console.error('‚ùå Erreur lors de la v√©rification d\'avis IA:', error);
      throw error;
    }

    const hasAIReview = data && data.length > 0;
    
    if (hasAIReview) {
      console.log('‚úÖ Avis IA existant trouv√©:', data[0]);
      return {
        exists: true,
        review: data[0],
        message: `Avis IA d√©j√† pr√©sent (cr√©√© le ${new Date(data[0].creation_date).toLocaleDateString()})`
      };
    } else {
      console.log('üì≠ Aucun avis IA trouv√© pour ce produit');
      return {
        exists: false,
        message: 'Aucun avis IA existant pour ce produit'
      };
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification d\'avis IA existant:', error);
    return {
      exists: false,
      error: error.message,
      message: 'Erreur lors de la v√©rification des avis existants'
    };
  }
};

/**
 * G√©n√®re automatiquement un avis IA pour un produit
 * @param {Object} params - Param√®tres de g√©n√©ration
 * @param {string} params.productCode - Code-barres du produit
 * @param {string} params.productName - Nom du produit
 * @param {string} params.userId - ID de l'utilisateur
 * @param {string} [params.criteria1] - Premier crit√®re (d√©faut: GOUT)
 * @param {string} [params.criteria2] - Deuxi√®me crit√®re (d√©faut: QUANTIT√â)
 * @param {string} [params.criteria3] - Troisi√®me crit√®re (d√©faut: PRIX)
 * @param {Function} [params.onProgress] - Callback pour suivre le progr√®s
 * @returns {Promise<Object>} - R√©sultat de la g√©n√©ration
 */
export const generateAIReview = async (params) => {
  try {
    console.log('ü§ñ D√©but de g√©n√©ration d\'avis IA pour:', params.productName);
    
    // Validation des param√®tres obligatoires
    if (!params.productCode || !params.productName || !params.userId) {
      throw new Error('Param√®tres manquants: productCode, productName et userId sont requis');
    }

    // Callback de progression si fourni
    if (params.onProgress) {
      params.onProgress('Initialisation de la g√©n√©ration d\'avis IA...');
    }




    // Pr√©parer les param√®tres avec valeurs par d√©faut
    const requestParams = {
      productCode: params.productCode,
      productName: params.productName,
      userId: params.userId,
      criteria1: params.criteres.data[0].display_name || 'GOUT',
      criteria2: params.criteres.data[1].display_name || 'QUANTIT√â',
      criteria3: params.criteres.data[2].display_name || 'PRIX',
      criteria1Id: params.criteres.data[0].id || '43b1121b-0ffe-478c-aa8c-ed38ef37e234',
      criteria2Id: params.criteres.data[1].id || 'e5f32be3-d08c-41be-bbae-db313ed0cb27',
      criteria3Id: params.criteres.data[2].id || '9ad348fb-b617-4af8-97c7-ab9f22739f0c'
    };

    console.log('üì§ Envoi de la requ√™te √† l\'API IA:', requestParams);

    if (params.onProgress) {
      params.onProgress('Cr√©ation automatique d\'un avis par l\'IA en cours...');
    }

    // Appel √† l'API avec timeout de 12 secondes
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 136000);

    const startTime = Date.now();

    const response = await fetch(AI_REVIEW_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestParams),
      signal: controller.signal
    });

    clearTimeout(timeoutId);
    const processingTime = Date.now() - startTime;

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.error || `Erreur API: ${response.status}`);
    }

    const result = await response.json();
    
    if (params.onProgress) {
      params.onProgress('Avis IA g√©n√©r√© avec succ√®s !');
    }

    console.log('‚úÖ Avis IA g√©n√©r√© avec succ√®s en', processingTime, 'ms:', result);

    return {
      success: true,
      reviewId: result.reviewId,
      review: result.review,
      processingTime: processingTime,
      apiProcessingTime: result.processingTime
    };

  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration d\'avis IA:', error);
    
    if (error.name === 'AbortError') {
      return {
        success: false,
        error: 'La g√©n√©ration d\'avis a pris trop de temps (timeout)',
        errorType: 'timeout'
      };
    }

    return {
      success: false,
      error: error.message || 'Erreur lors de la g√©n√©ration de l\'avis',
      errorType: 'api_error'
    };
  }
};

/**
 * V√©rifie si un produit peut b√©n√©ficier d'un avis IA automatique
 * @param {Object} product - Objet produit avec ses statistiques
 * @param {string} userId - ID de l'utilisateur connect√©
 * @returns {Object} - R√©sultat de la v√©rification
 */
export const shouldGenerateAIReview = (product, userId) => {
  try {
    // V√©rifications de base
    if (!product || !product.code || !product.product_name) {
      return {
        shouldGenerate: false,
        reason: 'Informations produit insuffisantes'
      };
    }

    if (!userId) {
      return {
        shouldGenerate: false,
        reason: 'Utilisateur non connect√©'
      };
    }

    // V√©rifier si le produit n'a pas encore d'avis
    const totalReviews = product.total_reviews || 0;
    
    if (totalReviews > 0) {
      return {
        shouldGenerate: false,
        reason: `Le produit a d√©j√† ${totalReviews} avis`
      };
    }

    // V√©rifier que ce n'est pas un produit trop g√©n√©rique
    if (product.product_name.length < 5) {
      return {
        shouldGenerate: false,
        reason: 'Nom de produit trop court pour une analyse pertinente'
      };
    }

    // Conditions remplies pour g√©n√©rer un avis IA
    return {
      shouldGenerate: true,
      reason: 'Produit √©ligible pour g√©n√©ration d\'avis IA automatique'
    };

  } catch (error) {
    console.error('Erreur lors de la v√©rification d\'√©ligibilit√©:', error);
    return {
      shouldGenerate: false,
      reason: `Erreur de v√©rification: ${error.message}`
    };
  }
};

/**
 * G√©n√®re automatiquement un avis IA si les conditions sont remplies
 * @param {Object} product - Objet produit
 * @param {string} userId - ID de l'utilisateur
 * @param {Function} onSuccess - Callback en cas de succ√®s
 * @param {Function} onError - Callback en cas d'erreur
 * @param {Function} onProgress - Callback pour suivre le progr√®s
 * @returns {Promise<boolean>} - True si la g√©n√©ration a √©t√© d√©clench√©e
 */
export const autoGenerateReviewIfNeeded = async (product, userId, onSuccess, onError, onProgress) => {
  try {
    // V√©rifier l'√©ligibilit√© de base
    const eligibility = shouldGenerateAIReview(product, userId);
    
    if (!eligibility.shouldGenerate) {
      console.log('üö´ G√©n√©ration IA non requise (crit√®res de base):', eligibility.reason);
      return false;
    }

    // NOUVELLE V√âRIFICATION : Contr√¥ler s'il existe d√©j√† un avis IA en base
    console.log('üîç V√©rification des avis IA existants...');

    const aiReviewCheck = await checkExistingAIReview(product.code);
    
    if (aiReviewCheck.error) {
      console.error('‚ö†Ô∏è Erreur lors de la v√©rification d\'avis IA:', aiReviewCheck.error);
      // Continuer malgr√© l'erreur de v√©rification pour ne pas bloquer
    }

    if (aiReviewCheck.exists) {
      console.log('üö´ Avis IA d√©j√† existant:', aiReviewCheck.message);
      // Ne pas afficher d'erreur √† l'utilisateur - c'est un cas normal, pas une erreur
      return false;
    }

    console.log('‚úÖ Pas d\'avis IA existant, g√©n√©ration automatique d√©clench√©e pour:', product.product_name);

    // SEULEMENT MAINTENANT d√©clencher les callbacks de progression
    if (onProgress) {
      onProgress('V√©rification des avis IA existants...');
    }
   // v√©rification des criteres suivant le produit
    const criteresResult = await getProductReviewCriterias(product.code);
      

    // D√©clencher la g√©n√©ration
    const result = await generateAIReview({
      productCode: product.code,
      productName: product.product_name,
      userId: userId,
      onProgress: onProgress,
      criteres: criteresResult

    });

    if (result.success) {
      console.log('üéâ Avis IA g√©n√©r√© automatiquement avec succ√®s');
      if (onSuccess) {
        onSuccess(result);
      }
      return true;
    } else {
      throw new Error(result.error);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration automatique:', error);
    if (onError) {
      onError(error.message);
    }
    return false;
  }
};

/**
 * R√©cup√®re tous les avis IA pour un produit donn√©
 * @param {string} productCode - Code-barres du produit
 * @returns {Promise<Object>} - Liste des avis IA
 */
export const getAIReviewsForProduct = async (productCode) => {
  try {
    console.log('üìã R√©cup√©ration des avis IA pour le produit:', productCode);
    
    if (!productCode) {
      throw new Error('Code produit requis');
    }

    const { data, error } = await supabase
      .from('product_reviews')
      .select(`
        id,
        comment,
        average_rating,
        taste_rating,
        quantity_rating,
        price_rating,
        creation_date,
        status,
        users!inner (display_name)
      `)
      .eq('product_code', productCode)
      .eq('review_source', 'ai')
      .in('status', ['approved', 'approved_auto'])
      .order('creation_date', { ascending: false });

    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des avis IA:', error);
      throw error;
    }

    console.log(`‚úÖ ${data.length} avis IA trouv√©s`);
    
    return {
      success: true,
      reviews: data || [],
      count: data ? data.length : 0
    };

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des avis IA:', error);
    return {
      success: false,
      error: error.message,
      reviews: [],
      count: 0
    };
  }
};

// 1. Fonction √† ajouter dans reviewService.js pour appeler la fonction Edge
/**
 * Valide automatiquement un avis via l'IA
 * @param {string} reviewId - ID de l'avis √† valider
 * @returns {Promise<object>} - R√©sultat de la validation
 */
export const validateReviewWithAI = async (reviewId) => {
  try {
    if (!reviewId) {
      throw new Error("ID de l'avis requis");
    }

    // URL de votre fonction Edge - √† adapter selon votre d√©ploiement
    const EDGE_FUNCTION_URL = `https://gwjkbtbtqntwaqtrflnq.supabase.co/functions/v1/validate-review`;
    
    const response = await fetch(EDGE_FUNCTION_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.REACT_APP_SUPABASE_ANON_KEY}`
      },
      body: JSON.stringify({ reviewId })
    });

    if (!response.ok) {
      throw new Error(`Erreur HTTP: ${response.status}`);
    }

    const result = await response.json();
    
    if (!result.success) {
      throw new Error(result.error || "Erreur lors de la validation");
    }

    return { 
      success: true, 
      data: result 
    };
  } catch (error) {
    console.error("Erreur lors de la validation IA:", error.message);
    return { 
      success: false, 
      error: error.message 
    };
  }
};

export default {
  generateAIReview,
  shouldGenerateAIReview,
  autoGenerateReviewIfNeeded,
  checkExistingAIReview,
  getAIReviewsForProduct,
  validateReviewWithAI
};